{"version":3,"file":"index-COwPcewv.js","sources":["../../src/components/SettingsModal/index.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getLearningStats, resetLearnedData } from '../../utils/persistentLearning';\nimport type { LearningStats } from '../../utils/persistentLearning';\nimport type { TicTacToe } from '../../components/TicTacToe/TicTacToe';\nimport type { BanditStats } from '../../utils/banditStrategies';\nimport type { BayesianStats } from '../../utils/bayesianModel';\n\ninterface SettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  difficulty?: TicTacToe.Difficulty;\n  setDifficulty?: (difficulty: TicTacToe.Difficulty) => void;\n  gameMode: TicTacToe.GameMode;\n}\n\nexport function SettingsModal({ isOpen, onClose, difficulty, setDifficulty, gameMode }: SettingsModalProps) {\n  const [stats, setStats] = useState<LearningStats | null>(null);\n  const [resetting, setResetting] = useState(false);\n\n  // Load stats when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setStats(getLearningStats());\n    }\n  }, [isOpen]);\n\n  // Handle resetting AI learning data\n  const handleReset = () => {\n    setResetting(true);\n    \n    // Add a small delay for UX feedback\n    setTimeout(() => {\n      resetLearnedData();\n      setStats(getLearningStats());\n      setResetting(false);\n    }, 300);\n  };\n\n  if (!isOpen) return null;\n\n  // Format date from timestamp\n  const formatTimestamp = (timestamp: number | null) => {\n    if (!timestamp) return 'Never';\n    return new Date(timestamp).toLocaleString();\n  };\n\n  // Render bandit strategy statistics\n  const renderBanditStats = () => {\n    if (!stats || !stats.bandit) return null;\n    \n    const banditStats = stats.bandit as BanditStats; // Type assertion for the bandit stats\n    \n    if (!banditStats.strategies || !Array.isArray(banditStats.strategies)) {\n      return <p>No strategy data available</p>;\n    }\n    \n    return (\n      <div className=\"stats-section\">\n        <h3>Strategy Performance</h3>\n        <div className=\"stats-table-container\">\n          <table className=\"stats-table\">\n            <thead>\n              <tr>\n                <th>Strategy</th>\n                <th>Win Rate</th>\n                <th>Wins</th>\n                <th>Losses</th>\n                <th>Draws</th>\n              </tr>\n            </thead>\n            <tbody>\n              {banditStats.strategies.map((strategy) => (\n                <tr key={strategy.name}>\n                  <td>{strategy.name}</td>\n                  <td>{(strategy.winRate * 100).toFixed(1)}%</td>\n                  <td>{strategy.wins}</td>\n                  <td>{strategy.losses}</td>\n                  <td>{strategy.draws}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <p className=\"stats-note\">\n          Current strategy: {banditStats.currentStrategy || 'None'}\n        </p>\n      </div>\n    );\n  };\n\n  // Render bayesian model statistics\n  const renderBayesianStats = () => {\n    if (!stats || !stats.bayesian) return null;\n    \n    const bayesianStats = stats.bayesian as BayesianStats; // Type assertion for the bayesian stats\n    \n    if (!bayesianStats.totalPatterns || bayesianStats.totalPatterns <= 0) {\n      return <p>No pattern data available</p>;\n    }\n    \n    return (\n      <div className=\"stats-section\">\n        <h3>Pattern Recognition</h3>\n        <p>\n          Total patterns learned: <strong>{bayesianStats.totalPatterns}</strong>\n        </p>\n        {bayesianStats.patternDetails && bayesianStats.patternDetails.length > 0 && (\n          <div className=\"pattern-preview\">\n            <h4>Top Patterns:</h4>\n            <ul className=\"pattern-list\">\n              {bayesianStats.patternDetails.slice(0, 3).map((pattern, idx: number) => (\n                <li key={idx}>\n                  <div className=\"mini-board\">\n                    {pattern.boardState.split('').map((cell: string, i: number) => (\n                      <div key={i} className=\"mini-cell\">\n                        {cell !== '-' ? cell : ''}\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"pattern-info\">\n                    <span>Observations: {pattern.observations}</span>\n                    {pattern.probabilities && pattern.probabilities.length > 0 && (\n                      <span>\n                        Predicted: {pattern.probabilities[0].move} \n                        ({(pattern.probabilities[0].probability * 100).toFixed(0)}%)\n                      </span>\n                    )}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render persistence information\n  const renderPersistenceInfo = () => {\n    if (!stats) return null;\n    \n    return (\n      <div className=\"stats-section\">\n        <h3>Data Persistence</h3>\n        <p>\n          Last saved: <strong>{formatTimestamp(stats.persistence.lastSavedTimestamp)}</strong>\n        </p>\n        <p>\n          Bandit data: <strong>{stats.persistence.hasSavedBanditData ? 'Saved' : 'Not Saved'}</strong>\n        </p>\n        <p>\n          Pattern data: <strong>{stats.persistence.hasSavedBayesianData ? 'Saved' : 'Not Saved'}</strong>\n        </p>\n        {stats.persistence.error && (\n          <p className=\"error-text\">Error: {stats.persistence.error}</p>\n        )}\n      </div>\n    );\n  };\n  \n  // Render difficulty selector\n  const renderDifficultySelector = () => {\n    if (gameMode !== 'single' || !setDifficulty || !difficulty) return null;\n    \n    return (\n      <div className=\"stats-section\">\n        <h3>Game Difficulty</h3>\n        <p>Select the AI opponent difficulty level:</p>\n        <div className=\"difficulty-buttons modal-difficulty-buttons\">\n          <button \n            className={`difficulty-button ${difficulty === 'easy' ? 'active' : ''}`}\n            onClick={() => setDifficulty('easy')}\n          >\n            Easy\n          </button>\n          <button \n            className={`difficulty-button ${difficulty === 'medium' ? 'active' : ''}`}\n            onClick={() => setDifficulty('medium')}\n          >\n            Medium\n          </button>\n          <button \n            className={`difficulty-button ${difficulty === 'hard' ? 'active' : ''}`}\n            onClick={() => setDifficulty('hard')}\n          >\n            Hard\n          </button>\n        </div>\n        {difficulty === 'hard' && (\n          <p className=\"settings-note\">\n            Hard mode enables AI learning to adapt to your play style.\n          </p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        <div className=\"modal-header\">\n          <h2>{difficulty === 'hard' ? 'Game & AI Learning Settings' : 'Game Settings'}</h2>\n          <button className=\"close-button\" onClick={onClose}>Ã—</button>\n        </div>\n        \n        <div className=\"modal-body\">\n          {/* Difficulty selector appears first and for any difficulty */}\n          {renderDifficultySelector()}\n          \n          {/* AI learning settings only shown for hard difficulty */}\n          {difficulty === 'hard' && (\n            <>\n              <div className=\"settings-description\">\n                <p>\n                  In Hard mode, the AI uses advanced algorithms to learn from your play style\n                  and adapt its strategy to counter your moves more effectively over time.\n                </p>\n              </div>\n              \n              <div className=\"stats-container\">\n                {renderBanditStats()}\n                {renderBayesianStats()}\n                {renderPersistenceInfo()}\n              </div>\n              \n              <div className=\"reset-section\">\n                <h3>Reset Learning Data</h3>\n                <p>\n                  This will reset all AI learning data and start fresh. This cannot be undone.\n                </p>\n                <button \n                  className={`reset-button ${resetting ? 'resetting' : ''}`}\n                  onClick={handleReset}\n                  disabled={resetting}\n                >\n                  {resetting ? 'Resetting...' : 'Reset AI Learning'}\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default { SettingsModal };"],"names":["SettingsModal","isOpen","onClose","difficulty","setDifficulty","gameMode","stats","setStats","useState","resetting","setResetting","useEffect","getLearningStats","handleReset","resetLearnedData","formatTimestamp","timestamp","renderBanditStats","banditStats","jsx","jsxs","strategy","renderBayesianStats","bayesianStats","pattern","idx","cell","i","renderPersistenceInfo","renderDifficultySelector","e","Fragment","index"],"mappings":"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"}